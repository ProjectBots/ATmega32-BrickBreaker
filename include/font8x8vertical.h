/**
 * @author MIC Lab Team - Olaf Sassnick
 * @brief 8x8 monochrome bitmap font for rendering, modified for column oriented graphics framebuffer layout.
 *
 * Original Author:
 *   Marcel Sondaar
 *   International Business Machines (public domain VGA fonts)
 *
 * License: Public Domain
 */

#ifndef _FONT_8X8_VERTICAL__H__
#define _FONT_8X8_VERTICAL__H__

#include <avr/pgmspace.h>

#include "fontspec.h"

static const FontSpec* font8x8vertical() __attribute__((unused));

static const FontSpec* font8x8vertical() {
	/* To save space, the font is stored in program memory (flash) */
	/* See https://www.nongnu.org/avr-libc/user-manual/pgmspace.html for further details. */
	static const uint8_t fontmap[] PROGMEM = {
		0, 0, 0, 0, 0, 0, 0, 0,			   /* U+0020 (space) */
		0, 24, 0, 24, 24, 60, 60, 24,	   /* U+0021 (!) */
		0, 0, 0, 0, 0, 0, 54, 54,		   /* U+0022 (") */
		0, 54, 54, 127, 54, 127, 54, 54,   /* U+0023 (#) */
		0, 12, 31, 48, 30, 3, 62, 12,	   /* U+0024 ($) */
		0, 99, 102, 12, 24, 51, 99, 0,	   /* U+0025 (%) */
		0, 110, 51, 59, 110, 28, 54, 28,   /* U+0026 (&) */
		0, 0, 0, 0, 0, 3, 6, 6,			   /* U+0027 (') */
		0, 24, 12, 6, 6, 6, 12, 24,		   /* U+0028 (() */
		0, 6, 12, 24, 24, 24, 12, 6,	   /* U+0029 ()) */
		0, 0, 102, 60, 255, 60, 102, 0,	   /* U+002A (*) */
		0, 0, 12, 12, 63, 12, 12, 0,	   /* U+002B (+) */
		6, 12, 12, 0, 0, 0, 0, 0,		   /* U+002C (,) */
		0, 0, 0, 0, 63, 0, 0, 0,		   /* U+002D (-) */
		0, 12, 12, 0, 0, 0, 0, 0,		   /* U+002E (.) */
		0, 1, 3, 6, 12, 24, 48, 96,		   /* U+002F (/) */
		0, 62, 103, 111, 123, 115, 99, 62, /* U+0030 (0) */
		0, 63, 12, 12, 12, 12, 14, 12,	   /* U+0031 (1) */
		0, 63, 51, 6, 28, 48, 51, 30,	   /* U+0032 (2) */
		0, 30, 51, 48, 28, 48, 51, 30,	   /* U+0033 (3) */
		0, 120, 48, 127, 51, 54, 60, 56,   /* U+0034 (4) */
		0, 30, 51, 48, 48, 31, 3, 63,	   /* U+0035 (5) */
		0, 30, 51, 51, 31, 3, 6, 28,	   /* U+0036 (6) */
		0, 12, 12, 12, 24, 48, 51, 63,	   /* U+0037 (7) */
		0, 30, 51, 51, 30, 51, 51, 30,	   /* U+0038 (8) */
		0, 14, 24, 48, 62, 51, 51, 30,	   /* U+0039 (9) */
		0, 12, 12, 0, 0, 12, 12, 0,		   /* U+003A (:) */
		6, 12, 12, 0, 0, 12, 12, 0,		   /* U+003B (;) */
		0, 24, 12, 6, 3, 6, 12, 24,		   /* U+003C (<) */
		0, 0, 63, 0, 0, 63, 0, 0,		   /* U+003D (=) */
		0, 6, 12, 24, 48, 24, 12, 6,	   /* U+003E (>) */
		0, 12, 0, 12, 24, 48, 51, 30,	   /* U+003F (?) */
		0, 30, 3, 123, 123, 123, 99, 62,   /* U+0040 (@) */
		0, 51, 51, 63, 51, 51, 30, 12,	   /* U+0041 (A) */
		0, 63, 102, 102, 62, 102, 102, 63, /* U+0042 (B) */
		0, 60, 102, 3, 3, 3, 102, 60,	   /* U+0043 (C) */
		0, 31, 54, 102, 102, 102, 54, 31,  /* U+0044 (D) */
		0, 127, 70, 22, 30, 22, 70, 127,   /* U+0045 (E) */
		0, 15, 6, 22, 30, 22, 70, 127,	   /* U+0046 (F) */
		0, 124, 102, 115, 3, 3, 102, 60,   /* U+0047 (G) */
		0, 51, 51, 51, 63, 51, 51, 51,	   /* U+0048 (H) */
		0, 30, 12, 12, 12, 12, 12, 30,	   /* U+0049 (I) */
		0, 30, 51, 51, 48, 48, 48, 120,	   /* U+004A (J) */
		0, 103, 102, 54, 30, 54, 102, 103, /* U+004B (K) */
		0, 127, 102, 70, 6, 6, 6, 15,	   /* U+004C (L) */
		0, 99, 99, 107, 127, 127, 119, 99, /* U+004D (M) */
		0, 99, 99, 115, 123, 111, 103, 99, /* U+004E (N) */
		0, 28, 54, 99, 99, 99, 54, 28,	   /* U+004F (O) */
		0, 15, 6, 6, 62, 102, 102, 63,	   /* U+0050 (P) */
		0, 56, 30, 59, 51, 51, 51, 30,	   /* U+0051 (Q) */
		0, 103, 102, 54, 62, 102, 102, 63, /* U+0052 (R) */
		0, 30, 51, 56, 14, 7, 51, 30,	   /* U+0053 (S) */
		0, 30, 12, 12, 12, 12, 45, 63,	   /* U+0054 (T) */
		0, 63, 51, 51, 51, 51, 51, 51,	   /* U+0055 (U) */
		0, 12, 30, 51, 51, 51, 51, 51,	   /* U+0056 (V) */
		0, 99, 119, 127, 107, 99, 99, 99,  /* U+0057 (W) */
		0, 99, 54, 28, 28, 54, 99, 99,	   /* U+0058 (X) */
		0, 30, 12, 12, 30, 51, 51, 51,	   /* U+0059 (Y) */
		0, 127, 102, 76, 24, 49, 99, 127,  /* U+005A (Z) */
		0, 30, 6, 6, 6, 6, 6, 30,		   /* U+005B ([) */
		0, 64, 96, 48, 24, 12, 6, 3,	   /* U+005C (\) */
		0, 30, 24, 24, 24, 24, 24, 30,	   /* U+005D (]) */
		0, 0, 0, 0, 99, 54, 28, 8,		   /* U+005E (^) */
		255, 0, 0, 0, 0, 0, 0, 0,		   /* U+005F (_) */
		0, 0, 0, 0, 0, 24, 12, 12,		   /* U+0060 (`) */
		0, 110, 51, 62, 48, 30, 0, 0,	   /* U+0061 (a) */
		0, 59, 102, 102, 62, 6, 6, 7,	   /* U+0062 (b) */
		0, 30, 51, 3, 51, 30, 0, 0,		   /* U+0063 (c) */
		0, 110, 51, 51, 62, 48, 48, 56,	   /* U+0064 (d) */
		0, 30, 3, 63, 51, 30, 0, 0,		   /* U+0065 (e) */
		0, 15, 6, 6, 15, 6, 54, 28,		   /* U+0066 (f) */
		31, 48, 62, 51, 51, 110, 0, 0,	   /* U+0067 (g) */
		0, 103, 102, 102, 110, 54, 6, 7,   /* U+0068 (h) */
		0, 30, 12, 12, 12, 14, 0, 12,	   /* U+0069 (i) */
		30, 51, 51, 48, 48, 48, 0, 48,	   /* U+006A (j) */
		0, 103, 54, 30, 54, 102, 6, 7,	   /* U+006B (k) */
		0, 30, 12, 12, 12, 12, 12, 14,	   /* U+006C (l) */
		0, 99, 107, 127, 127, 51, 0, 0,	   /* U+006D (m) */
		0, 51, 51, 51, 51, 31, 0, 0,	   /* U+006E (n) */
		0, 30, 51, 51, 51, 30, 0, 0,	   /* U+006F (o) */
		15, 6, 62, 102, 102, 59, 0, 0,	   /* U+0070 (p) */
		120, 48, 62, 51, 51, 110, 0, 0,	   /* U+0071 (q) */
		0, 15, 6, 102, 110, 59, 0, 0,	   /* U+0072 (r) */
		0, 31, 48, 30, 3, 62, 0, 0,		   /* U+0073 (s) */
		0, 24, 44, 12, 12, 62, 12, 8,	   /* U+0074 (t) */
		0, 110, 51, 51, 51, 51, 0, 0,	   /* U+0075 (u) */
		0, 12, 30, 51, 51, 51, 0, 0,	   /* U+0076 (v) */
		0, 54, 127, 127, 107, 99, 0, 0,	   /* U+0077 (w) */
		0, 99, 54, 28, 54, 99, 0, 0,	   /* U+0078 (x) */
		31, 48, 62, 51, 51, 51, 0, 0,	   /* U+0079 (y) */
		0, 63, 38, 12, 25, 63, 0, 0,	   /* U+007A (z) */
		0, 56, 12, 12, 7, 12, 12, 56,	   /* U+007B ({) */
		0, 24, 24, 24, 0, 24, 24, 24,	   /* U+007C (|) */
		0, 7, 12, 12, 56, 12, 12, 7,	   /* U+007D (}) */
		0, 0, 0, 0, 0, 0, 59, 110,		   /* U+007E (~) */
	};
	static const FontSpec spec = {
		.data = fontmap, .charSize = 8, .firstChar = ' ', .lastChar = '~'};
	return &spec;
}

#endif
