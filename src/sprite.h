/**
 * @author MIC Lab Team
 * @brief Cute little puppy
 *
 */

#ifndef SPRITE_H_
#define SPRITE_H_

#include <avr/pgmspace.h>
#include <stdint.h>

#include "utils/disp/bitmap.h"

/** Created by https://jinxedbyte.itch.io/1bit-dog-puppy
 *  Converted with the LCD-Image-Converter for the Microcontroller Lab at the Salzburg University of Applied Sciences
 *  Converter Settings: Monochrome, Main Scan Direction: left to right, Line Scan Direction: backwards 
 */
static Bitmap imagePuppy(uint8_t index)
{
    /* To save space, the font is stored in program memory (flash) */
    /* See https://www.nongnu.org/avr-libc/user-manual/pgmspace.html for further details. */

    static const uint8_t bitmap1[128] PROGMEM = { 0x3c, 0x00, 0xc0, 0x00,
        0x42, 0x07, 0x20, 0x00,
        0x81, 0xf8, 0xc0, 0x00,
        0xb9, 0x07, 0x00, 0x00,
        0xe6, 0x04, 0x00, 0x00,
        0x40, 0x02, 0x00, 0x00,
        0x80, 0x02, 0x00, 0x00,
        0xb0, 0x01, 0x00, 0x00,
        0xc8, 0x01, 0x00, 0x00,
        0x08, 0x01, 0x00, 0x00,
        0x08, 0x01, 0x00, 0x00,
        0x08, 0x00, 0xff, 0x00,
        0x08, 0x00, 0x40, 0xe0,
        0x04, 0x00, 0x80, 0x10,
        0x04, 0x00, 0x80, 0x08,
        0x04, 0x01, 0x00, 0x14,
        0x02, 0x01, 0x00, 0x14,
        0x04, 0x01, 0xc7, 0x94,
        0x04, 0x00, 0x38, 0x64,
        0x14, 0x03, 0x00, 0x04,
        0x2c, 0x03, 0x00, 0x04,
        0x24, 0x05, 0x07, 0x04,
        0x18, 0x19, 0x0d, 0x84,
        0x09, 0xe1, 0x0c, 0x88,
        0x11, 0x01, 0x07, 0x30,
        0x22, 0x01, 0x00, 0xc0,
        0x1c, 0x01, 0x07, 0x00,
        0x00, 0x01, 0x04, 0x00,
        0x00, 0x01, 0x1c, 0x00,
        0x00, 0x00, 0x9c, 0x00,
        0x00, 0x00, 0x78, 0x00,
        0x00, 0x00, 0x00, 0x00 };

    static const uint8_t bitmap2[128] PROGMEM = { 0x31, 0x80, 0x00, 0x00,
        0x2d, 0x40, 0x00, 0x00,
        0x23, 0x20, 0x00, 0x00,
        0x19, 0xa0, 0x10, 0x00,
        0x04, 0xd0, 0x68, 0x00,
        0x04, 0x39, 0x90, 0x00,
        0x02, 0x06, 0x60, 0x00,
        0x01, 0x00, 0x80, 0x00,
        0x01, 0x00, 0x40, 0x00,
        0x00, 0x80, 0x40, 0x00,
        0x00, 0x80, 0x40, 0x00,
        0x00, 0x80, 0x40, 0x00,
        0x00, 0x80, 0x40, 0x00,
        0x00, 0x80, 0x5e, 0x00,
        0x01, 0x00, 0x61, 0xc0,
        0x01, 0x00, 0x60, 0x20,
        0x01, 0x00, 0x40, 0x18,
        0x01, 0x00, 0x40, 0x04,
        0x01, 0x00, 0x60, 0x04,
        0x01, 0x00, 0x10, 0x0a,
        0x01, 0x00, 0x0f, 0xca,
        0x06, 0x00, 0x80, 0x2a,
        0x18, 0x01, 0x00, 0x12,
        0x20, 0x01, 0x00, 0x04,
        0x47, 0xff, 0x07, 0x04,
        0x9c, 0x81, 0x0c, 0x84,
        0xa9, 0x02, 0x06, 0x84,
        0xd2, 0x02, 0x01, 0x08,
        0x14, 0x02, 0x07, 0xf0,
        0x18, 0x02, 0x38, 0x00,
        0x00, 0x01, 0x38, 0x00,
        0x00, 0x00, 0xf0, 0x00 };

    static const uint8_t bitmap3[128] PROGMEM = { 0x00, 0x00, 0x40, 0x00,
        0x0f, 0x80, 0xa0, 0x00,
        0x10, 0x81, 0x40, 0x00,
        0x1e, 0xbd, 0x40, 0x00,
        0x1c, 0xc2, 0x80, 0x00,
        0x24, 0x00, 0x80, 0x00,
        0x38, 0x00, 0x80, 0x00,
        0x06, 0x00, 0x80, 0x00,
        0x02, 0x00, 0x80, 0x00,
        0x01, 0x80, 0x80, 0x00,
        0x01, 0x00, 0x80, 0x00,
        0x01, 0x00, 0x80, 0x00,
        0x01, 0x00, 0xfe, 0x00,
        0x01, 0x00, 0x81, 0xc0,
        0x02, 0x01, 0x00, 0x20,
        0x02, 0x01, 0x00, 0x10,
        0x62, 0x02, 0x00, 0x28,
        0x9a, 0x02, 0x00, 0x28,
        0x86, 0x03, 0x8f, 0x28,
        0xe3, 0x00, 0x70, 0xc8,
        0x18, 0x82, 0x00, 0x08,
        0x08, 0x02, 0x00, 0x08,
        0x04, 0x02, 0x0e, 0x08,
        0x3f, 0x02, 0x1b, 0x08,
        0x40, 0x84, 0x19, 0x10,
        0x8f, 0xfa, 0x0e, 0x60,
        0xb0, 0x06, 0x01, 0x80,
        0xc0, 0x02, 0x0e, 0x00,
        0x00, 0x02, 0x08, 0x00,
        0x00, 0x02, 0x38, 0x00,
        0x00, 0x01, 0x38, 0x00,
        0x00, 0x00, 0xf0, 0x00 };

    static const uint8_t bitmap4[128] PROGMEM = { 0x00, 0x00, 0x80, 0x00,
        0x00, 0x01, 0x40, 0x00,
        0x00, 0x01, 0x40, 0x00,
        0x00, 0x01, 0x40, 0x00,
        0x00, 0x02, 0x80, 0x00,
        0x00, 0x06, 0x80, 0x00,
        0x18, 0xf8, 0x40, 0x00,
        0x15, 0x40, 0x40, 0x00,
        0x1e, 0x40, 0x40, 0x00,
        0x13, 0x80, 0x40, 0x00,
        0x24, 0x00, 0x40, 0x00,
        0x4c, 0x00, 0x40, 0x00,
        0x95, 0x80, 0x7f, 0xe0,
        0xa9, 0x60, 0x40, 0x10,
        0xeb, 0x00, 0x80, 0x08,
        0x2a, 0x00, 0x80, 0x14,
        0x14, 0x01, 0x00, 0x14,
        0x0e, 0x01, 0x01, 0x94,
        0x01, 0x00, 0xc6, 0x64,
        0x00, 0xc0, 0x38, 0x04,
        0x00, 0xa0, 0x00, 0x04,
        0x00, 0x41, 0x01, 0x82,
        0x00, 0x3f, 0x02, 0xc2,
        0x00, 0x01, 0x06, 0x44,
        0x00, 0x01, 0x07, 0x98,
        0x00, 0x00, 0x80, 0x60,
        0x00, 0x00, 0x81, 0x80,
        0x00, 0x00, 0x82, 0x00,
        0x00, 0x00, 0x82, 0x00,
        0x00, 0x00, 0x8e, 0x00,
        0x00, 0x00, 0x4e, 0x00,
        0x00, 0x00, 0x3c, 0x00 };

    static const uint8_t* const bitmap[4] PROGMEM = { bitmap1, bitmap2, bitmap3, bitmap4 };
    return (Bitmap) { .data = (const uint8_t *)pgm_read_ptr(&bitmap[index]), .width = 32, .height = 32, .dataSize = 8 };
}

#endif /* SPRITE_H_ */
